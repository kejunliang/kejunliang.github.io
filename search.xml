<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webcrawler</title>
      <link href="/2019/03/05/webcrawler/"/>
      <url>/2019/03/05/webcrawler/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟登录的实现"><a href="#模拟登录的实现" class="headerlink" title="模拟登录的实现"></a>模拟登录的实现</h1><p>   <strong>分析下我们一般的登录过程就是向服务器发送用户和密码，服务器响应后返回一个唯一编码，把这个编码存在Cookie里，这样我们后续的访问都带着这个cookie来访问，就实现了登录过程。下来我们就来实现这两个步骤</strong></p><h1 id="获取cookies"><a href="#获取cookies" class="headerlink" title="获取cookies"></a>获取cookies</h1><ol><li>首先我们用浏览器分析下登录过程。<br>  1). 打开网站（这里是最简单模式，没有验证码）的登录页面，打开调试器，按照下图操作进行登录。<br>  <img src="/2019/03/05/webcrawler/data1.png" alt><br>  2). 打开第一个截图的login的资源请求如下图，主要是为了找到formdata数据。<br>  <img src="/2019/03/05/webcrawler/data2.png" alt><br>  3). 查找formData的数据，在这里之前json对象传输请求的时候一直遇到了一些问题，后来就改成用url参数的方式来请求，请看下图。<br>  <img src="/2019/03/05/webcrawler/data3.png" alt></li><li><p>到这里我们就可以开始撸代码了。<br>  1). 用node的http 模拟请求。这里注意我们要将请求的方法返回一个promise对象，这样为了将请求成功后的值传递给下一个操作。至于原因就不说了。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getLtpaToken</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建promise 用户再次获取的时候传递cookie信息</span></span><br><span class="line">    <span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 第一次请求获取  LtpaToken</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> options = &#123;  </span><br><span class="line">            hostname: <span class="string">'uatbx.xxx.com.cn'</span>,   <span class="comment">//这里是样例，请注意实际的域名信息</span></span><br><span class="line">            path: <span class="string">"/names.nsf?Login&amp;%25%25ModDate=0000000000000000&amp;reasonType=0&amp;%25%25Surrogate_locale=1&amp;locale=zh-cn&amp;Username="</span>+Username+<span class="string">"&amp;Password="</span>+Password+<span class="string">"&amp;RedirectTo=%2Findishare%2Fsecurtrac.nsf%2Fagttrac%3Fopenagent%26url%3D%2Findishare%2Fbxgl%2Fywjcsj.nsf%2F%28frame%29%2Fdzbx"</span>, </span><br><span class="line">            headers: &#123;</span><br><span class="line">              <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">            &#125;, </span><br><span class="line">            method: <span class="string">'GET'</span>  </span><br><span class="line">        &#125;;   </span><br><span class="line">        <span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);  </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));  </span><br><span class="line">            res.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">              chunks.push(data)</span><br><span class="line">            &#125;)</span><br><span class="line">            res.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> cookie=<span class="built_in">JSON</span>.stringify(res.headers)</span><br><span class="line">              resolve(cookie)</span><br><span class="line">            &#125;); </span><br><span class="line">        </span><br><span class="line">        &#125;); </span><br><span class="line">        req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  </span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'problem with request: '</span> + e.message);  </span><br><span class="line">          reject( e.message)</span><br><span class="line">        &#125;);  </span><br><span class="line"></span><br><span class="line">        req.end(); </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2). 我们根据返回过来的LtpaToken在次请求另外一个路径。我们将这个值存在headers的cookies里</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 进行登录并返回信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetInfo</span>(<span class="params">cookie</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"jinlaile==="</span>+cookie);</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">JSON</span>.parse(cookie)</span><br><span class="line">    LtpaToken=obj[<span class="string">"set-cookie"</span>][<span class="number">0</span>].split(<span class="string">";"</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">/// 第二次请求 登录</span></span><br><span class="line">    <span class="keyword">var</span> cookie=<span class="string">"myusername="</span>+Username+<span class="string">"; SessionID=21C724E0CA4022AA707FD502CCFDCAC9FFC8344C; indi_locale=zh-cn;"</span>+LtpaToken</span><br><span class="line">    <span class="keyword">var</span> options1 = &#123;  </span><br><span class="line">        hostname: <span class="string">'uatbx.xxx.com.cn'</span>,  </span><br><span class="line">        path: <span class="string">"/ghbx/dep1/xypj.nsf/frmTongJi?OpenForm&amp;name="</span>, </span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">          <span class="string">'Cookie'</span>: cookie</span><br><span class="line">        &#125;, </span><br><span class="line">        method: <span class="string">'GET'</span>  </span><br><span class="line">    &#125;;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">var</span> reqAgain = http.request(options1, <span class="function"><span class="keyword">function</span> (<span class="params">res1</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res1.statusCode);  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res1.headers));  </span><br><span class="line">        <span class="keyword">var</span> chunks=[]</span><br><span class="line">        res1.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                chunks.push(data)</span><br><span class="line">        &#125;)</span><br><span class="line">        res1.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// console.log(chunks)</span></span><br><span class="line">            <span class="comment">// 将二进制数据解码成 gb2312 编码数据</span></span><br><span class="line">            <span class="keyword">var</span> html = iconv.decode(Buffer.concat(chunks), <span class="string">'gb2312'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1111</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(html)</span><br><span class="line">            <span class="keyword">var</span> $ = cheerio.load(html,&#123;<span class="attr">decodeEntities</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">            <span class="comment">//获取数据table</span></span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;);    </span><br><span class="line">    reqAgain.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'problem with request: '</span> + e.message);  </span><br><span class="line">    &#125;);  </span><br><span class="line">    reqAgain.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  3). 就是最后调用的主方法了。最终第二次请求的时候其实就能登录并返回页面html代码。</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据获取的ltpatoken进行登录并获取页面信息</span></span><br><span class="line"><span class="function"><span class="title">getLtpaToken</span><span class="params">()</span></span>.then((value)=&gt;&#123;</span><br><span class="line">console.log(value)</span><br><span class="line"><span class="function"><span class="title">GetInfo</span><span class="params">(value)</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>后续工作， 优化代码。。。   </li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2019/03/05/hello-world/"/>
      <url>/2019/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="快速创建一个博客"><a href="#快速创建一个博客" class="headerlink" title="快速创建一个博客"></a>快速创建一个博客</h2><h3 id="创建一个博客"><a href="#创建一个博客" class="headerlink" title="创建一个博客"></a>创建一个博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="同步到github"><a href="#同步到github" class="headerlink" title="同步到github"></a>同步到github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>domino- xml解析</title>
      <link href="/2019/02/28/domino/"/>
      <url>/2019/02/28/domino/</url>
      
        <content type="html"><![CDATA[<h1 id="domino-日常打卡-xml解析"><a href="#domino-日常打卡-xml解析" class="headerlink" title="domino 日常打卡-xml解析"></a>domino 日常打卡-xml解析</h1><h2 id="其实在我们获取到domParser-Document方法后就可以用对象-来查看所有获取的方法，然后根据自己的需求来获取数据"><a href="#其实在我们获取到domParser-Document方法后就可以用对象-来查看所有获取的方法，然后根据自己的需求来获取数据" class="headerlink" title="其实在我们获取到domParser.Document方法后就可以用对象.来查看所有获取的方法，然后根据自己的需求来获取数据"></a>其实在我们获取到domParser.Document方法后就可以用对象.来查看所有获取的方法，然后根据自己的需求来获取数据</h2><p>解析xml的常用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">REM</span><br><span class="line">功能：将xml字符串转化为xml对象</span><br><span class="line">%END REM</span><br><span class="line">Function getdocflowxmltime(strXml As String ) As Double </span><br><span class="line">    On Error GoTo h</span><br><span class="line">    Dim session As New NotesSession</span><br><span class="line">Dim domParser As NotesDOMParser   &apos;定义xml 文档对象</span><br><span class="line">Dim documentList As NotesDOMNodeList</span><br><span class="line">Dim eNode As NotesDOMElementNode</span><br><span class="line">Dim i As Integer</span><br><span class="line">Dim allstat As Double </span><br><span class="line">    &apos;找到每条文档对应的意见文档</span><br><span class="line">strXml = Replace(Replace(strXml,Chr(10),&quot;&quot;) ,Chr(13),&quot;&quot;)</span><br><span class="line">If strXml &lt;&gt; &quot;&quot; Then</span><br><span class="line">Set domParser=session.CreateDOMParser(strXml)</span><br><span class="line">domParser.Process</span><br><span class="line">Set documentList = domParser.Document.GetElementsByTagName (&quot;NodeInfo&quot;)  &apos;根据实际需求来处理</span><br><span class="line">For i = 1 To documentList.NumberOfEntries</span><br><span class="line">Set eNode = documentList.GetItem(i)</span><br><span class="line">&apos;根据实际需求来解析 </span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getdocflowxmltime=allstat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;msg(allstat)</span><br><span class="line"></span><br><span class="line">Exit Function </span><br><span class="line">h:</span><br><span class="line">showerror(&quot;getdocflowxmltime&quot;)</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> domino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> domino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github创建个人博客的说明</title>
      <link href="/2019/02/27/day/"/>
      <url>/2019/02/27/day/</url>
      
        <content type="html"><![CDATA[<h1 id="一-创建仓库"><a href="#一-创建仓库" class="headerlink" title="一 创建仓库"></a>一 创建仓库</h1><p>   <strong> 这里要注意仓库的地址必须是你的github的帐号+github.io,比如kejunliang.github.io，否则你会在后面遇到一个坑，就是你的css样式在发布到仓库后无法正常加载。</strong><br><img src="/2019/02/27/day/creat.png" alt></p><h1 id="二-打开仓库的设置页面，找到GitHub-Pages"><a href="#二-打开仓库的设置页面，找到GitHub-Pages" class="headerlink" title="二 打开仓库的设置页面，找到GitHub Pages"></a>二 打开仓库的设置页面，找到GitHub Pages</h1><p><img src="/2019/02/27/day/page.png" alt></p><h1 id="三-选择主题"><a href="#三-选择主题" class="headerlink" title="三 选择主题"></a>三 选择主题</h1><p><img src="/2019/02/27/day/select.png" alt></p><h1 id="四-主题选择后确定提交后就可以了"><a href="#四-主题选择后确定提交后就可以了" class="headerlink" title="四 主题选择后确定提交后就可以了"></a>四 主题选择后确定提交后就可以了</h1><h1 id="五-在浏览器访问自己在第一步设置的地址-比如kejunliang-github-io或者在GitHub-Pages页面查看自己的博客地址。"><a href="#五-在浏览器访问自己在第一步设置的地址-比如kejunliang-github-io或者在GitHub-Pages页面查看自己的博客地址。" class="headerlink" title="五 在浏览器访问自己在第一步设置的地址 比如kejunliang.github.io或者在GitHub Pages页面查看自己的博客地址。"></a>五 在浏览器访问自己在第一步设置的地址 比如kejunliang.github.io或者在GitHub Pages页面查看自己的博客地址。</h1><h1 id="六-安装hexo"><a href="#六-安装hexo" class="headerlink" title="六 安装hexo"></a>六 安装hexo</h1>]]></content>
      
      
      <categories>
          
          <category> hexo                       （这个就是文章的分类了） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git                   （这个就是文章的标签了） </tag>
            
            <tag> hexo               （这个就是文章的标签了） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="/2019/02/27/note/"/>
      <url>/2019/02/27/note/</url>
      
        <content type="html"><![CDATA[<h2 id="每日感悟"><a href="#每日感悟" class="headerlink" title="每日感悟"></a>每日感悟</h2><p>  如果改变不了环境，那么就改变自己吧。</p><h1 id="如何在github创建个人的博客"><a href="#如何在github创建个人的博客" class="headerlink" title="如何在github创建个人的博客"></a>如何在github创建个人的博客</h1><h2 id="在github创建一个项目"><a href="#在github创建一个项目" class="headerlink" title="在github创建一个项目"></a>在github创建一个项目</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
